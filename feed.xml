<?xml version="1.0" encoding="UTF-8"?>  
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">  
    <channel>  
        <title></title>  
        <description>首页描述首页描述首页描述首页描述首页描述首页描述首页描述 首页描述首页描述首页描述。
</description>  
        <link>http://localhost:4000</link>  
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />  
          
            <item>  
               <title>Kali系统中使用smbclient访问windows共享目录</title>  
               <description>&lt;p&gt;在类似与&lt;strong&gt;kali&lt;/strong&gt;系统的&lt;strong&gt;Linux&lt;/strong&gt;环境中，若要访问windows共享目录，即smb协议的目录共享机制，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient&lt;/code&gt;工具进行访问。&lt;/p&gt;

&lt;p&gt;当然除了可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient&lt;/code&gt;命令行的方式，还可以直接在资源管理器中使用&lt;strong&gt;smb&lt;/strong&gt;协议进行访问，如&lt;code class=&quot;highlighter-rouge&quot;&gt;smb://192.168.1.22&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;smbclient的使用方法&quot;&gt;smbclient的使用方法&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 列出目标主机所有共享目录&lt;/span&gt;
smbclient -L 192.168.1.22 -U administrator

&lt;span class=&quot;c&quot;&gt;# 访问目标主机指定的共享目录&lt;/span&gt;
smbclient //192.168.1.22/test -U administrator

&lt;span class=&quot;c&quot;&gt;# 带密码的访问目标主机指定共享目录&lt;/span&gt;
smbclient //192.168.1.198/test -U administrator 123321
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>  
               <pubDate>Wed, 16 Nov 2016 00:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/11/use-smbclient-in-kali/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/11/use-smbclient-in-kali/</guid>  
               </item>  
          
            <item>  
               <title>Veil-Evasion与Armitage的集成操作</title>  
               <description>&lt;p&gt;&lt;a href=&quot;https://www.veil-framework.com/framework/veil-evasion/&quot;&gt;veil-evasion&lt;/a&gt; 是有名的终端下后门生成工具，其免杀效果表现的非常好。&lt;strong&gt;armitage&lt;/strong&gt; 是 metasploit 的图形化操作界面，本文就两者如何集成进行简单说明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kali&lt;/strong&gt; 系统下 &lt;strong&gt;armitage&lt;/strong&gt; 是默认安装的， &lt;strong&gt;veil-evasion&lt;/strong&gt; 是需要独立进行安装的，下载地址 &lt;a href=&quot;https://www.veil-framework.com/framework/veil-evasion/&quot;&gt;https://www.veil-framework.com/framework/veil-evasion&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;1-启动-posgresql-数据库&quot;&gt;1. 启动 posgresql 数据库&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;armitage&lt;/strong&gt; 的启动依赖于 &lt;strong&gt;postgresql&lt;/strong&gt; 数据库，与 &lt;strong&gt;metasploit&lt;/strong&gt; 共享信息。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service postgresql start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;2-打开-armitage-加载-veil-evasion-模块&quot;&gt;2. 打开 armitage 加载 veil-evasion 模块&lt;/h1&gt;

&lt;p&gt;依次点击 &lt;strong&gt;armitage&lt;/strong&gt; 菜单，Armitage - Scripts，点击 Load 按钮定位到 &lt;strong&gt;veil-evasion&lt;/strong&gt; 的安装目录中找到 &lt;strong&gt;armitage&lt;/strong&gt; 的扩展文件 &lt;strong&gt;veil-evasion/tools/cortanaveil_evasion.cna&lt;/strong&gt; 加载，加载完成后就会在 &lt;strong&gt;armitage&lt;/strong&gt; 的菜单中看见 &lt;strong&gt;Veil-Evasion&lt;/strong&gt; 的菜单已经被加载到了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ohdpyqlwy.bkt.clouddn.com/armitage-veilevasion_1.png&quot; alt=&quot;armitage1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-测试生成-payload&quot;&gt;3. 测试生成 payload&lt;/h1&gt;

&lt;p&gt;点击 &lt;strong&gt;armitage&lt;/strong&gt; 上的 &lt;strong&gt;Veil-Evasion&lt;/strong&gt; 菜单，首次运行会提示输入完整的 &lt;strong&gt;veil-evasion&lt;/strong&gt; 安装路径。配置好生成参数，点击 Generate 按钮即可生成后门文件，也可以点击 Use Listener 按钮开启对后门的监听。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ohdpyqlwy.bkt.clouddn.com/armitage-veilevasion_2.png&quot; alt=&quot;armitage2&quot; /&gt;&lt;/p&gt;

</description>  
               <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/11/veilevasion-and-armitage/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/11/veilevasion-and-armitage/</guid>  
               </item>  
          
            <item>  
               <title>服务器上的iptables防火墙应该如何配置才能更安全</title>  
               <description>&lt;p&gt;新入网的服务器在不做任何配置的情况下将会出现很多安全问题。端口肆意暴露、来源请求不明，恶意的数据包源源不断的流入服务器中。&lt;/p&gt;

&lt;p&gt;公有云或许会控制非常用端口的访问，只开通如22、80、8080或者8443这样的常用端口，尽管屏蔽了大多数端口，但有效的做好防火墙规则仍然很重要。&lt;/p&gt;

&lt;p&gt;下面流程化说明防火墙配置步骤&lt;/p&gt;

&lt;h1 id=&quot;1-封口&quot;&gt;1. 封口&lt;/h1&gt;

&lt;p&gt;将输入、输出、转向的数据包丢弃，对服务器进行彻底隔离，在封闭的环境中配置规则。这里值得提醒的是此操作需要在本机执行，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 的连接会当即断开。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# 丢弃输入数据流向 &lt;/span&gt;
iptables -P INPUT DROP
 &lt;span class=&quot;c&quot;&gt;# 丢弃输出数据流向 &lt;/span&gt;
iptables -P OUTPUT DROP
 &lt;span class=&quot;c&quot;&gt;# 丢弃转向数据流向 &lt;/span&gt;
iptables -P FORWARD DROP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;2-开放ssh服务&quot;&gt;2. 开放SSH服务&lt;/h1&gt;

&lt;p&gt;首先确保 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 远程连接开放，添加对 ssh 服务的出入站规则，正常端口为22（端口应该更换成非22）&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 允许任务来源接入服务器的22端口&lt;/span&gt;
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
&lt;span class=&quot;c&quot;&gt;# 允许服务器通过22端口向任何来源发送数据包&lt;/span&gt;
iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;做好以上的 ssh 服务规则后，任何来源等可以连接，若要求更高级的安全则可以添加准入IP，可以添加多条，其他服务同理。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 允许来源IP为221.4.12.28的地址访问服务器的22端口，即ssh服务&lt;/span&gt;
iptables -I INPUT -s 221.4.12.28 -p tcp --dport 22 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;3-启用ping命令&quot;&gt;3. 启用Ping命令&lt;/h1&gt;

&lt;p&gt;当执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; 命令时，其实是向目标地址发送 &lt;strong&gt;icmp&lt;/strong&gt; 的数据包并得到回显信息。在服务器内部 ping 外部地址时，属于 &lt;strong&gt;OUTPUT&lt;/strong&gt;，由于服务器的输出已经被DROP掉，所以服务器目前 ping 不通任何外部 IP 地址，考虑到运维的需要，添加允许 ping 外部IP的规则。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 允许服务器向外部发送icmp的数据包&lt;/span&gt;
iptables -A OUTPUT -p icmp --icmp-type &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;-request -j ACCEPT
&lt;span class=&quot;c&quot;&gt;# 允许服务器接收来自外部服务器返回的icmp数据包&lt;/span&gt;
iptables -A INPUT -p icmp --icmp-type &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;-reply -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前服务器可以 ping 外部IP地址了，但外部来源 ping 服务器是不通的。&lt;strong&gt;选择不开放来自外部的 ping 请求或许是一个好想法&lt;/strong&gt;，这样可以迷惑扫描工具避免暴露主机的存活性(高级的扫描工具除外，如 nmap)。&lt;/p&gt;

&lt;p&gt;下面是服务器接收和响应 ping 请求的出入站规则&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 允许任何来源向服务器发送icmp的数据包&lt;/span&gt;
iptables -A INPUT -p icmp --icmp-type &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;-request -j ACCEPT
&lt;span class=&quot;c&quot;&gt;# 允许服务器向任何来源回显icmp的数据包&lt;/span&gt;
iptables -A OUTPUT -p icmp --icmp-type &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;-reply -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;4-启用dns服务&quot;&gt;4. 启用DNS服务&lt;/h1&gt;

&lt;p&gt;服务器 ping 外部IP地址正常了，但 ping 外部的域名时则会显示 &lt;strong&gt;unknown host&lt;/strong&gt; 的错误，这是因为 DNS 服务的53端口没有配置出入站规则。&lt;/p&gt;

&lt;p&gt;下面是 DNS 服务的规则:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -p udp -i eth0 --sport 53 -j ACCEPT
iptables -A OUTPUT -p udp -o eth0 --dport 53 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;5-下载软件&quot;&gt;5. 下载软件&lt;/h1&gt;

&lt;p&gt;现在服务器需要从外部下载某些软件，通常我们会使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 这样的工具，执行时发现一直卡着不动。这是因为服务器访问外网的80端口出站和入站规则没有配置，需要添加，如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --sport 80 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：使用类似与nginx代理转发到内网主机上某个服务时，同样也需要添加如上规则。如转发到内网 &lt;strong&gt;192.168.1.22&lt;/strong&gt; 上的 &lt;strong&gt;48443&lt;/strong&gt;的服务，规则如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A OUTPUT -p tcp --dport 48843 -j ACCEPT
iptables -A INPUT -p tcp --sport 48843 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;6-启用本地回路loopback&quot;&gt;6. 启用本地回路loopback&lt;/h1&gt;

&lt;p&gt;本地回路即 &lt;strong&gt;localhost&lt;/strong&gt;，运维时通常会使用本地回路判断某些服务是否正常，这个必要有。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;7-应用端规则&quot;&gt;7. 应用端规则&lt;/h1&gt;

&lt;p&gt;应用端规则指的是如 nginx、apache 等应用，启动后，默认情况下外网是不能访问的。如需要开通 nginx 的 &lt;strong&gt;80&lt;/strong&gt; 和 &lt;strong&gt;443&lt;/strong&gt; 端口，其他应用类似。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A OUTPUT -p tcp --sport 443 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;经过上面配置，基本能满足服务器端的安全需要，由于目前操作系统已经趋于成熟化，补丁打的及时基本可以杜绝服务器端被黑。大多数情况是部署在服务器上自身的应用存在问题，所以仅仅控制好服务器上的访问权还是不行，更多的是应用程序的安全稳定性才是关键。&lt;/p&gt;
</description>  
               <pubDate>Mon, 12 Sep 2016 00:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/09/iptables-security-policy/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/09/iptables-security-policy/</guid>  
               </item>  
          
            <item>  
               <title>maven集成ant错误optional.ReplaceRegExp was not found</title>  
               <description>
</description>  
               <pubDate>Sat, 10 Sep 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/09/maven-err-replaceregexp/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/09/maven-err-replaceregexp/</guid>  
               </item>  
          
            <item>  
               <title>jdk1.8 高效stream流的遍历、聚合示例代码</title>  
               <description>
</description>  
               <pubDate>Thu, 08 Sep 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/09/jdk18-stream-demo/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/09/jdk18-stream-demo/</guid>  
               </item>  
          
            <item>  
               <title>mongodb异常Too many threads are already waiting for a connection</title>  
               <description>
</description>  
               <pubDate>Wed, 07 Sep 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/09/mongodb-too-many-threads/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/09/mongodb-too-many-threads/</guid>  
               </item>  
          
            <item>  
               <title>solr-suggest检索建议配置说明</title>  
               <description>
</description>  
               <pubDate>Sun, 14 Aug 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/08/solr-suggest/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/08/solr-suggest/</guid>  
               </item>  
          
            <item>  
               <title>solr-master-slave主从模式的配置实现</title>  
               <description>
</description>  
               <pubDate>Sat, 06 Aug 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/08/solr-master-slave/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/08/solr-master-slave/</guid>  
               </item>  
          
            <item>  
               <title>solr-索引迁移备份与恢复的配置与操作</title>  
               <description>
</description>  
               <pubDate>Fri, 05 Aug 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/08/solr-backup-restore/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/08/solr-backup-restore/</guid>  
               </item>  
          
            <item>  
               <title>solr-使用uuid类型自动生成主键id</title>  
               <description>
</description>  
               <pubDate>Thu, 04 Aug 2016 12:00:00 +0800</pubDate>  
               <link>http://localhost:4000/2016/08/solr-uuid-geneate/</link>  
               <guid isPermaLink="true">http://localhost:4000/2016/08/solr-uuid-geneate/</guid>  
               </item>  
          
    </channel>  
</rss>
